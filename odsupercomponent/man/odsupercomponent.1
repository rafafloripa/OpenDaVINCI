.\" Manpage for odsupercomponent
.\" Author: Christian Berger <christian.berger@gu.se>.

.TH odsupercomponent 1 "15 April 2016" "3.0.4" "odsupercomponent man page"

.SH NAME
odsupercomponent \- This tool configures and monitors a set of distributed software components.



.SH SYNOPSIS
.B odsupercomponent [OPTIONS] --cid=<CID>



.SH DESCRIPTION
odsupercomponent belongs to OpenDaVINCI and is the central tool to configure and monitor
distributed software components. The tool provides a set of configuration parameter
settings that are specific for a software component, when it connects to odsupercomponent.
 
odsupercomponent also enables the communication between software components. For this
purpose, it either creates a UDP multicast session to provide publish/subscribe communication
among the software modules or transparently re-routes the components' communication
through odsupercomponent using TCP to realize a central hub-based communication.

If odsupercomponent is terminated by pressing CTRL-C, it will send a terminate signal to
all connected software modules so that they terminate as well.



.SH OPTIONS
odsupercomponent provides different command line options that influence the characteristics
of how the distributed software components are scheduled and communicate with each other.

.B --cid=<CID>
.RS
This parameter specifies the conference identifier (CID) that is used to create a UDP
multicast session. The multicast session will be made available at 225.0.0.CID.

It is possible to run several sessions on the same host when different CIDs are used.

Please note that on Linux-based systems, a multicast-capable device needs to be present.
If odsupercomponent shall be used on a single host system with no network devices, the
loopback device can be configured properly as shown below.

.RS
sudo ifconfig lo multicast

sudo route add -net 224.0.0.0 netmask 240.0.0.0 dev lo
.RE

.RE


.B --configuration=<FILE>
.RS
This parameter specifies the configuration file that shall be distributed to the software
modules, which will register for this CID. The format of the configuration is

.RS
.B # Comments are preceded by #

.B global.debug = 1

.B component.key = value

.B component:1.key = value
.RE

A configuration file is a text file containing one configuration setting per line. A
configuration setting is a key-value-pair divided by '='; the key is preceded by a heading
section 'component.', where 'component' is the name of one of the software components
awaiting the set of configuration settings. A software component will receive only
those key-value-pairs where its name is matching with 'component.' In addition, any key
preceded by 'global.' is visible to all software components.

If an application uses several instances of the same software component that, however,
shall behave differently, numerical identifiers can be added to the key-part of a
configuration setting as shown in 'component:1.key = value'. The respective software
component must be started in-turn with '--id=1' to specify the respective numerical
identifiers.

Example:

.RS
.B global.debug = 1

.B odrecorder.filename = myFilename.rec
.RE

Any changes to the configuration file during a running CID session will have no effect;
thus, odsupercomponent needs to be restarted once the configuration file has been modified.

.RE


.B --freq=<FREQ>
.RS
This parameter specifies the runtime frequency in Hz that is used to run odsupercomponent.
If this parameter is omitted, a runtime frequency of 1 Hz is used.

This parameter has no effect in the case a UDP multicast session is used. Is the central
hub-based communication with deterministic scheduling of the connected software modules
is used, this frequency also specifies the runtime frequency of the distributed software
modules.
.RE


.B --managed=<simulation, simulation_rt>
.RS
This parameter specifies that any connected software modules will be managed in a
deterministic way regarding its scheduling and communication.

The setting '--managed=simulation' enforces a deterministic scheduling of the distributed
software components executed in the order, in which they are started and successfully
connected to odsupercomponent. In addition, any communication initiated by a software
modules running on a distributed node, will be centrally routed through odsupercomponent
to all other software modules that belong to the specified CID. Furthermore, a
distributed software module can only send data when it is scheduled for execution;
otherwise, any communication will be delayed until the following time slice.
 
The setting '--managed=simulation_rt' enables a similar behavior '--managed=simulation';
the difference is that once all software modules have be executed in the current time slice,
odsupercomponent will wait until the current time slice has completely expired before the
next time slice will start.

The following configuration parameters need to be specified in the configuration file:

.RS
.B supercomponent.pulsetimeack.timeout = 5000 # In milliseconds.

.B supercomponent.pulsetimeack.yield = 5000 # In milliseconds.

.B supercomponent.pulsetimeack.exclude = cockpit,componentA,componentB # List of components that are excluded from deterministic scheduling.
.RE

The first parameter 'supercomponent.pulsetimeack.timeout' specifies the timeout in
milliseconds that is used before a component is considered to be not responsive after it
has been activated for the current time slice.

The second parameter 'supercomponent.pulsetimeack.yield' specifies the time in milliseconds
before the next module is started in the current time slice.

The last parameter 'supercomponent.pulsetimeack.exclude' specifies the names of components
that are excluded from the enforced deterministic scheduling. Thus, these components are
executed in parallel and will additionally receive the data replicated to the UDP multicast
session.

.RE


.B --logFile=<LOGFILE>
.RS
This parameter specifies the file name where log data shall be stored. Distributed software
modules can send log data to odsupercomponent, which will store these messages in the
specified log file.

The format of the log file is:

.RS
<time stamp in microseconds> ";" <name of the sending module> ";" <numerical log level, 0 - 3> ";" <message> ";"
.RE

New log messages will be appended if the log file is already existing.
.RE


.B --logLevel=<none, info, warn, debug>
.RS
This parameter specifies the level up to which log messages will be stored in the specified
log file. For example, if '--logLevel=info' is specified, all messages of type 'warn' and 'debug'
will not be saved.
.RE


.B --realtime=<0..49>
.RS
This parameter will schedule odsupercomponent and its dependent software modules using the
SCHED_FIFO soft realtime scheduler. The parameter specifies the scheduling priority.

Please note that this feature is only available on Linux-based systems having a CONFIG_PREEMPT_RT
kernel. In addition, odsupercomponent needs to be executed with superuser privileges.
.RE


.B --verbose=<0..10>
.RS
This parameter specifies the verbosity level that is used to print some information to stdlog.
.RE



.SH EXAMPLES
The following command creates a new UDP multicast session with the ID 111 running at UDP
address 225.0.0.111, where the last part of the IP address is the specified CID.

.B odsupercomponent --cid=111

The following command creates a new UDP multicast session with the ID 112 running at UDP
address 225.0.0.112, where log messages are stored into 'myLogfile.csv' for the level 'info'.

.B odsupercomponent --cid=112 --logFile=myLogfile.csv --logLevel=info

The following command creates a communication session with the ID 113 where all subsequently
started software modules are enforced to re-route their communication centrally through
odsupercomponent. All software components are executed with 10 Hz in a deterministic order
according to their start and successful connection to odsupercomponent. Furthermore, the
modules' are scheduled using a soft realtime scheduler.

.B sudo odsupercomponent --cid=113 --freq=10 --managed=simulation_rt --realtime=10



.SH SEE ALSO
odplayer(1), odrecorder(1), odrecintegrity(1), odredirector(1), odsplit(1), odspy(1)



.SH BUGS
No known bugs.



.SH AUTHOR
Christian Berger (christian.berger@gu.se)

